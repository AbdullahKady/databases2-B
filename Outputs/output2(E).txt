A1: 
[
  {
    "Plan": {
      "Startup Cost": 1000,
      "Plans": [
        {
          "Filter": "(\"position\" = 1)",
          "Startup Cost": 0,
          "Node Type": "Seq Scan",
          "Plan Rows": 2342696,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": true,
          "Parent Relationship": "Outer",
          "Plan Width": 27,
          "Total Cost": 1516009.83
        }
      ],
      "Workers Planned": 2,
      "Node Type": "Gather",
      "Plan Rows": 5622471,
      "Parallel Aware": false,
      "Single Copy": false,
      "Plan Width": 27,
      "Total Cost": 2079256.93
    }
  }
]

A2:
"Total Cost": 2079256.93

A3:

[
  {
    "Plan": {
      "Startup Cost": 9569.72,
      "Plans": [
        {
          "Startup Cost": 0,
          "Plan Width": 0,
          "Node Type": "Bitmap Index Scan",
          "Index Cond": "(\"position\" = 1)",
          "Plan Rows": 511133,
          "Parallel Aware": false,
          "Parent Relationship": "Outer",
          "Total Cost": 9441.93,
          "Index Name": "position_idx"
        }
      ],
      "Node Type": "Bitmap Heap Scan",
      "Plan Rows": 511133,
      "Relation Name": "played_in",
      "Alias": "played_in",
      "Parallel Aware": false,
      "Recheck Cond": "(\"position\" = 1)",
      "Plan Width": 27,
      "Total Cost": 806315.15
    }
  }
]

A4:  
"Total Cost": 806315.15

A5: 
It did change, it decreased (about 60% improvement), the reason being that the query when ran using the position_indx (Bitmap one, which is appropriate for the select one value query),
the cost of finding (WHERE position = 1) was only 9441.93 using the index, instead of it being originally 1516009.83, using that the total cost ended up being only 806315.15 instead of 2079256.93

=============================================================
=============================================================

B1:
[
  {
    "Plan": {
      "Startup Cost": 1000,
      "Plans": [
        {
          "Filter": "((name)::text ~~ '%pele%'::text)",
          "Startup Cost": 0,
          "Node Type": "Seq Scan",
          "Plan Rows": 8573,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": true,
          "Parent Relationship": "Outer",
          "Plan Width": 27,
          "Total Cost": 943092.67
        }
      ],
      "Workers Planned": 2,
      "Node Type": "Gather",
      "Plan Rows": 20575,
      "Parallel Aware": false,
      "Single Copy": false,
      "Plan Width": 27,
      "Total Cost": 946150.17
    }
  }
]

B2:
"Total Cost": 946150.17

B3:

[
  {
    "Plan": {
      "Startup Cost": 1000,
      "Plans": [
        {
          "Filter": "((name)::text ~~ '%pele%'::text)",
          "Startup Cost": 0,
          "Node Type": "Seq Scan",
          "Plan Rows": 8573,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": true,
          "Parent Relationship": "Outer",
          "Plan Width": 27,
          "Total Cost": 943092.67
        }
      ],
      "Workers Planned": 2,
      "Node Type": "Gather",
      "Plan Rows": 20575,
      "Parallel Aware": false,
      "Single Copy": false,
      "Plan Width": 27,
      "Total Cost": 946150.17
    }
  }
]

B4:
"Total Cost": 946150.17

B5: 
The execution plan and cost didn't change after adding the index. 
This is because the query requires checking all characters in the attribute 'name' to check if it matches the criteria at any position in the string.


=============================================================
=============================================================

C1:
[
  {
    "Plan": {
      "Filter": "((rating * '3'::double precision) > '20'::double precision)",
      "Startup Cost": 0,
      "Node Type": "Seq Scan",
      "Plan Rows": 166667,
      "Relation Name": "cup_matches",
      "Alias": "cup_matches",
      "Parallel Aware": false,
      "Plan Width": 28,
      "Total Cost": 49128
    }
  }
]

C2:
"Total Cost": 49128

C3:
[
  {
    "Plan": {
      "Filter": "((rating * '3'::double precision) > '20'::double precision)",
      "Startup Cost": 0,
      "Node Type": "Seq Scan",
      "Plan Rows": 166667,
      "Relation Name": "cup_matches",
      "Alias": "cup_matches",
      "Parallel Aware": false,
      "Plan Width": 28,
      "Total Cost": 49128
    }
  }
]

C4:
"Total Cost": 49128

C5: 
The execution plan and estimated cost did not change. That is because there are a lot of duplicate values in the column 'rating'. So a sequence scan here is even more efficient.


=============================================================
=============================================================

D1:
[
  {
    "Plan": {
      "Inner Unique": false,
      "Startup Cost": 56296,
      "Plans": [
        {
          "Startup Cost": 0,
          "Node Type": "Seq Scan",
          "Plan Rows": 11000000,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": false,
          "Parent Relationship": "Outer",
          "Plan Width": 27,
          "Total Cost": 995801
        },
        {
          "Startup Cost": 46628,
          "Plans": [
            {
              "Startup Cost": 0,
              "Node Type": "Seq Scan",
              "Plan Rows": 500000,
              "Relation Name": "cup_matches",
              "Alias": "cup_matches",
              "Parallel Aware": false,
              "Parent Relationship": "Outer",
              "Plan Width": 28,
              "Total Cost": 46628
            }
          ],
          "Node Type": "Hash",
          "Plan Rows": 500000,
          "Parallel Aware": false,
          "Parent Relationship": "Inner",
          "Plan Width": 28,
          "Total Cost": 46628
        }
      ],
      "Node Type": "Hash Join",
      "Plan Rows": 189709742495,
      "Join Type": "Inner",
      "Parallel Aware": false,
      "Hash Cond": "(played_in.year = cup_matches.year)",
      "Plan Width": 55,
      "Total Cost": 2149722081.95
    }
  }
]

D2:
[
  {
    "Plan": {
      "Inner Unique": false,
      "Startup Cost": 56296,
      "Plans": [
        {
          "Startup Cost": 0,
          "Node Type": "Seq Scan",
          "Plan Rows": 11000000,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": false,
          "Parent Relationship": "Outer",
          "Plan Width": 27,
          "Total Cost": 995801
        },
        {
          "Startup Cost": 46628,
          "Plans": [
            {
              "Startup Cost": 0,
              "Node Type": "Seq Scan",
              "Plan Rows": 500000,
              "Relation Name": "cup_matches",
              "Alias": "cup_matches",
              "Parallel Aware": false,
              "Parent Relationship": "Outer",
              "Plan Width": 28,
              "Total Cost": 46628
            }
          ],
          "Node Type": "Hash",
          "Plan Rows": 500000,
          "Parallel Aware": false,
          "Parent Relationship": "Inner",
          "Plan Width": 28,
          "Total Cost": 46628
        }
      ],
      "Node Type": "Hash Join",
      "Plan Rows": 189709742495,
      "Join Type": "Inner",
      "Parallel Aware": false,
      "Hash Cond": "(played_in.year = cup_matches.year)",
      "Plan Width": 55,
      "Total Cost": 2149722081.95
    }
  }
]

D3:
No the plan and estimated cost did not change.
This is because the there is only an index in one of the tables.

D4:
[
  {
    "Plan": {
      "Inner Unique": false,
      "Startup Cost": 56296,
      "Plans": [
        {
          "Startup Cost": 0,
          "Node Type": "Seq Scan",
          "Plan Rows": 11000000,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": false,
          "Parent Relationship": "Outer",
          "Plan Width": 27,
          "Total Cost": 995801
        },
        {
          "Startup Cost": 46628,
          "Plans": [
            {
              "Startup Cost": 0,
              "Node Type": "Seq Scan",
              "Plan Rows": 500000,
              "Relation Name": "cup_matches",
              "Alias": "cup_matches",
              "Parallel Aware": false,
              "Parent Relationship": "Outer",
              "Plan Width": 28,
              "Total Cost": 46628
            }
          ],
          "Node Type": "Hash",
          "Plan Rows": 500000,
          "Parallel Aware": false,
          "Parent Relationship": "Inner",
          "Plan Width": 28,
          "Total Cost": 46628
        }
      ],
      "Node Type": "Hash Join",
      "Plan Rows": 189709742495,
      "Join Type": "Inner",
      "Parallel Aware": false,
      "Hash Cond": "(played_in.year = cup_matches.year)",
      "Plan Width": 55,
      "Total Cost": 2149722081.95
    }
  }
]

D5:
No the plan and the cost did not change. 
That is beacuase a cartesian product does not benefit from any indices and after that a selection is made.


===================================================
===================================================

E1:
[
  {
    "Plan": {
      "Inner Unique": true,
      "Startup Cost": 56296,
      "Plans": [
        {
          "Startup Cost": 0,
          "Node Type": "Seq Scan",
          "Plan Rows": 11000000,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": false,
          "Parent Relationship": "Outer",
          "Plan Width": 27,
          "Total Cost": 995801
        },
        {
          "Startup Cost": 46628,
          "Plans": [
            {
              "Startup Cost": 0,
              "Node Type": "Seq Scan",
              "Plan Rows": 500000,
              "Relation Name": "cup_matches",
              "Alias": "cup_matches",
              "Parallel Aware": false,
              "Parent Relationship": "Outer",
              "Plan Width": 28,
              "Total Cost": 46628
            }
          ],
          "Node Type": "Hash",
          "Plan Rows": 500000,
          "Parallel Aware": false,
          "Parent Relationship": "Inner",
          "Plan Width": 28,
          "Total Cost": 46628
        }
      ],
      "Node Type": "Hash Join",
      "Plan Rows": 11000000,
      "Join Type": "Inner",
      "Parallel Aware": false,
      "Hash Cond": "(played_in.mid = cup_matches.mid)",
      "Plan Width": 55,
      "Total Cost": 1344781.8
    }
  }
]

Join type is a "Hash Join", and the query's total cost is 1344781.8


E2:

[
  {
    "Plan": {
      "Inner Unique": false,
      "Startup Cost": 14.41,
      "Plans": [
        {
          "Startup Cost": 0.42,
          "Scan Direction": "Forward",
          "Plan Width": 28,
          "Node Type": "Index Scan",
          "Plan Rows": 500000,
          "Relation Name": "cup_matches",
          "Alias": "cup_matches",
          "Parallel Aware": false,
          "Parent Relationship": "Outer",
          "Total Cost": 114523.42,
          "Index Name": "cup_matches_pkey"
        },
        {
          "Startup Cost": 0.56,
          "Scan Direction": "Forward",
          "Plan Width": 27,
          "Node Type": "Index Scan",
          "Plan Rows": 11000000,
          "Relation Name": "played_in",
          "Alias": "played_in",
          "Parallel Aware": false,
          "Parent Relationship": "Inner",
          "Total Cost": 16149024.06,
          "Index Name": "\"PK\""
        }
      ],
      "Node Type": "Merge Join",
      "Plan Rows": 11000000,
      "Join Type": "Inner",
      "Parallel Aware": false,
      "Plan Width": 55,
      "Merge Cond": "(cup_matches.mid = played_in.mid)",
      "Total Cost": 1826832.16
    }
  }
]

Join algorithim used is the Merge join.
And the cost of the query is 1826832.16

E3:
[
  {
    "Plan": {
      "Startup Cost": 1000.56,
      "Plans": [
        {
          "Inner Unique": false,
          "Startup Cost": 0.56,
          "Plans": [
            {
              "Startup Cost": 0,
              "Node Type": "Seq Scan",
              "Plan Rows": 208333,
              "Relation Name": "cup_matches",
              "Alias": "cup_matches",
              "Parallel Aware": true,
              "Parent Relationship": "Outer",
              "Plan Width": 28,
              "Total Cost": 43711.33
            },
            {
              "Startup Cost": 0.56,
              "Scan Direction": "Forward",
              "Plan Width": 27,
              "Node Type": "Index Scan",
              "Index Cond": "(mid = cup_matches.mid)",
              "Plan Rows": 54,
              "Relation Name": "played_in",
              "Alias": "played_in",
              "Parallel Aware": false,
              "Parent Relationship": "Inner",
              "Total Cost": 83.38,
              "Index Name": "\"PK\""
            }
          ],
          "Node Type": "Nested Loop",
          "Plan Rows": 4583333,
          "Join Type": "Inner",
          "Parallel Aware": false,
          "Parent Relationship": "Outer",
          "Plan Width": 55,
          "Total Cost": 17527946.07
        }
      ],
      "Workers Planned": 2,
      "Node Type": "Gather",
      "Plan Rows": 11000000,
      "Parallel Aware": false,
      "Single Copy": false,
      "Plan Width": 55,
      "Total Cost": 18628946.07
    }
  }
]

The join algorithim used is the "Nested Loop", and the total estimated cost is = 18628946.07 

